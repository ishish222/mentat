{
  "name": "mentat",
  "displayName": "mentat",
  "description": "VSCode extension for analysing code from ITSec viewpoint",
  "version": "0.0.1",
  "engines": {
    "vscode": "^1.88.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "mentat.explain",
        "title": "mentat:explain"
      },
      {
        "command": "mentat.explain_icache",
        "title": "mentat:explain (inv. cache)"
      },
      {
        "command": "mentat.refresh_tree",
        "title": "mentat:refresh_tree"
      },
      {
        "command": "mentat.decompose",
        "title": "mentat:decompose"
      },
      {
        "command": "mentat.decompose_icache",
        "title": "mentat:decompose (inv. cache)"
      },
      {
        "command": "mentat.map_contract",
        "title": "mentat:map_contract"
      },
      {
        "command": "mentat.map_contract_icache",
        "title": "mentat:map_contract (inv. cache)"
      },
      {
        "command": "mentat.change_model",
        "title": "mentat:change_model"
      },
      {
        "command": "mentat.save_tree",
        "title": "mentat:save_tree"
      },
      {
        "command": "mentat.load_tree",
        "title": "mentat:load_tree"
      },
      {
        "command": "mentat.save_trees",
        "title": "mentat:save_trees"
      }
    ],
    "menus": {
      "editor/context": [
        {
          "command": "mentat.decompose",
          "group": "mentat@1"
        },
        {
          "command": "mentat.decompose_icache",
          "group": "mentat@2"
        },
        {
          "command": "mentat.refresh_tree",
          "group": "mentat@3"
        },
        {
          "command": "mentat.save_tree",
          "group": "mentat@4"
        },
        {
          "command": "mentat.load_tree",
          "group": "mentat@5"
        },
        {
          "command": "mentat.save_trees",
          "group": "mentat@6"
        }
      ],
      "view/item/context": [
        {
          "command": "mentat.map_contract",
          "when": "view == mentat.treeview && viewItem == explanationNodeContract",
          "group": "mentat@1"
        },
        {
          "command": "mentat.map_contract_icache",
          "when": "view == mentat.treeview && viewItem == explanationNodeContract",
          "group": "mentat@2"
        },
        {
          "command": "mentat.explain",
          "when": "(view == mentat.treeview && viewItem == explanationNode) || (view == mentat.treeview && viewItem == explanationNodeContract)",
          "group": "mentat@3"
        },
        {
          "command": "mentat.explain_icache",
          "when": "(view == mentat.treeview && viewItem == explanationNode) || (view == mentat.treeview && viewItem == explanationNodeContract)",
          "group": "mentat@3"
        }

      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "mentat",
          "title": "Mentat",
          "icon": "resources/icon.svg"
        }
      ]
    },
    "views": {
      "mentat": [
        {
          "type": "webview",
          "id": "mentat.view",
          "name": "Chat"
        },
        {
          "id": "mentat.treeview",
          "name": "Tree View"
        },
        {
          "type": "webview",
          "id": "mentat.explanation",
          "name": "Explanation View"
        }
      ]
    },
    "configuration": {
      "title": "Mentat",
      "properties": {
        "mentat.cache.S3CacheEnable": {
          "type": "boolean",
          "order": 1,
          "default": false,
          "description": "Enable S3 cache'ing of responses."
        },
        "mentat.cache.S3CacheAWSRoleKeyId": {
          "type": "string",
          "order": 2,
          "default": null,
          "description": "Key ID of AWS role that has access to the cache bucket."
        },
        "mentat.cache.S3CacheAWSRoleSecretKey": {
          "type": "string",
          "order": 3,
          "default": null,
          "description": "Secret key of AWS role that has access to the cache bucket."
        },
        "mentat.cache.S3CacheAWSRegion": {
          "type": "string",
          "order": 4,
          "default": null,
          "description": "Region of the location of the cache bucket."
        },
        "mentat.cache.S3CacheBucket": {
          "type": "string",
          "order": 5,
          "default": null,
          "description": "Name of the cache bucket."
        },
        "mentat.cache.S3CachePrefix": {
          "type": "string",
          "order": 6,
          "default": null,
          "description": "Prefix for the cache bucket."
        },
        "mentat.openrouter.openrouterApiKey": {
          "type": "string",
          "order": 7,
          "default": null,
          "description": "Specifies the Openrouter API key to use."
        },
        "mentat.openrouter.openrouterModelName": {
          "type": "string",
          "order": 8,
          "default": null,
          "description": "Specified the OpenRouter model to use."
        },
        "mentat.openrouter.openrouterMaxTokens": {
          "type": "integer",
          "order": 8,
          "default": 50000,
          "description": "Maximum number of tokens allowed in the prompt (input+output)."
        },
        "mentat.traceLangsmith.LangsmithEnable": {
          "type": "boolean",
          "order": 9,
          "default": false,
          "description": "Enable tracing with Langsmith."
        },
        "mentat.traceLangsmith.LangsmithURL": {
          "type": "string",
          "order": 10,
          "default": "https://api.smith.langchain.com",
          "description": "Langsmith URL for tracing."
        },
        "mentat.traceLangsmith.LangsmithAPIKey": {
          "type": "string",
          "order": 11,
          "default": "",
          "description": "Langsmith API key."
        },
        "mentat.traceLangsmith.LangstmithProjectName": {
          "type": "string",
          "order": 12,
          "default": null,
          "description": "Langsmith project name."
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.6",
    "@types/node": "18.x",
    "@types/vscode": "^1.88.0",
    "@typescript-eslint/eslint-plugin": "^7.0.2",
    "@typescript-eslint/parser": "^7.0.2",
    "@vscode/test-cli": "^0.0.6",
    "@vscode/test-electron": "^2.3.9",
    "eslint": "^8.56.0",
    "typescript": "^5.3.3"
  },
  "dependencies": {
    "@langchain/community": "^0.0.40",
    "@langchain/core": "^0.1.48",
    "@solidity-parser/parser": "^0.18.0",
    "aws-sdk": "^2.1602.0",
    "dotenv": "^16.4.5",
    "langsmith": "^0.1.18",
    "openai": "^4.28.4",
    "solidity-workspace": "^0.2.1",
    "sqlite3": "^5.1.7"
  }
}
